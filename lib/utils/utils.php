<?phpnamespace BtcRelax;use BtcRelax\NotFoundException;use BtcRelax\Config;use BtcRelax\DAO;use BtcRelax\Model\Customer;use BtcRelax\Model\Bookmark;use BtcRelax\Validation\BookmarkValidator;use BtcRelax\CustomerDao;use BtcRelax\Mapping\CustomerMapper;final class Utils {    private function __construct() {    }    public static function createLink($page, array $params = []) {        unset($params['page']);        return 'index.php?' . http_build_query(array_merge(['page' => $page], $params));    }    public static function formatDate(DateTime $date = null) {        $result = null;        if ($date !== null) {            $result = $date->format('m/d/Y');        }        return $result;    }    public static function formatDateTime(DateTime $date = null) {        $result = null;        if ($date !== null) {            $result = $date->format('m/d/Y H:i');        }        return $result;    }    public static function iconStatus($status, $disabled = false, $tooltip = true) {        Bookmark::validateStatus($status);        $title = $tooltip ?: '';        $icon = '<i class="material-icons ' . ($disabled ? 'disabled' : strtolower($status)) . '"';        if ($tooltip) {            $icon .= ' title="' . self::capitalize($status) . '"';        }        $icon .= '>' . self::$STATUS_ICONS[$status] . '</i>';        return $icon;    }    public static function iconPriority($priority) {        return str_repeat(                '<i class="material-icons multi priority" title="Priority ' . $priority . '">star</i>', 4 - $priority);    }    public static function redirect($page, array $params = []) {        header('Location: ' . self::createLink($page, $params));        die();    }    public static function getUrlParam($name) {        if (!array_key_exists($name, $_GET)) {            throw new NotFoundException('URL parameter "' . $name . '" not found.');        }        return $_GET[$name];    }    public static function tryGetUrlParam($name) {        if (!array_key_exists($name, $_GET)) {            return false;        }        return $_GET[$name];    }    public static function tryGetParam($name) {        if (!array_key_exists($name, $_REQUEST)) {            return false;        }        return $_REQUEST[$name];    }    public static function getCustomerById($custId) {        if ($custId == null) {            throw new NotFoundException('Unknown customer identifier provided.');        }        $dao = new CustomerDao();        $cust = $dao->findById($custId);        if ($cust === null) {            throw new NotFoundException('Customer not found.');        }        return $cust;    }    public static function httpGet($url, $post_vars = false) {	//header('Cache-Control: no-cache, no-store, must-revalidate'); // HTTP 1.1.        //header('Pragma: no-cache'); // HTTP 1.0.        //header('Expires: 0'); // Proxies.        $post_contents = '';	if ($post_vars) {		if (is_array($post_vars)) {			foreach($post_vars as $key => $val) {				$post_contents .= ($post_contents ? '&' : '').urlencode($key).'='.urlencode($val);			}		} else {			$post_contents = $post_vars;		}	}	$uinf = \parse_url($url);	$host = $uinf['host'];	$path = $uinf['path'];	$path .= (isset($uinf['query']) && $uinf['query']) ? ('?'.$uinf['query']) : '';	$headers = array(		($post_contents ? 'POST' : 'GET')." $path HTTP/1.1",		"Host: $host",	);	if ($post_contents) {		$headers[] = 'Content-Type: application/x-www-form-urlencoded';		$headers[] = 'Content-Length: '.strlen($post_contents);	}	$ch = curl_init();	curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);	curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);	curl_setopt($ch, CURLOPT_URL,$url);	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);	curl_setopt($ch, CURLOPT_TIMEOUT, 600);	curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);	if ($post_contents) {		curl_setopt($ch, CURLOPT_POST, 1);		curl_setopt($ch, CURLOPT_POSTFIELDS, $post_contents);	}	$data = curl_exec($ch);	if (curl_errno($ch)) {		return false;	}	curl_close($ch);	return $data;    }        public static function capitalize($string) {        return ucfirst(mb_strtolower($string));    }    public static function escape($string) {        return htmlspecialchars($string, ENT_QUOTES);    }}