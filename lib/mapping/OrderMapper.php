<?php  namespace BtcRelax\Mapping;  use \DateTime;  use \BtcRelax\Model\Order;  final class OrderMapper {	private function __construct() {	}        public static function map(\BtcRelax\Model\Order $order, array $properties) {		if (array_key_exists('CreateDate', $properties)) {			$createdOn = self::createDateTime($properties['CreateDate']);			if ($createdOn) { $order->setCreateDate($createdOn);  }    		}                if (array_key_exists('EndDate', $properties)) {                    $finishDate = self::createDateTime($properties['EndDate']);                        if ($finishDate) { $order->setEndDate($finishDate); }                }                if (array_key_exists('idOrder', $properties)) {                    $order->setIdOrder($properties['idOrder']);                                 }                if (array_key_exists('OrderState', $properties)) {                    $order->setState($properties['OrderState']);                }                if (array_key_exists('idSaller', $properties)) {                    $order->setSaller($properties['idSaller']);                }                if (array_key_exists('BTCPrice', $properties)) {                    $order->setBTCPrice($properties['BTCPrice']);                }                if (array_key_exists('PricingDate', $properties)) {                    $priced = self::createDateTime($properties['PricingDate']);                    if ($priced) {$order->setPricingDate($priced); }                }                if (array_key_exists('InvoiceAddress', $properties)) {                    $order->setInvoiceAddress($properties['InvoiceAddress']);                }                if (array_key_exists('InvoiceBalance', $properties)) {                    $order->setInvoiceBalance($properties['InvoiceBalance']);                }                if (array_key_exists('DeliveryMethod', $properties)) {                    $order->setDeliveryMethod($properties['DeliveryMethod']);                }                if (array_key_exists('BalanceDate', $properties)) {                    $balanced = self::createDateTime($properties['BalanceDate']);                     if ($balanced) { $order->setBalanceDate($balanced);}                }                if (array_key_exists('idCreator', $properties)) {                    $idCreator = $properties['idCreator'];                    if (!empty($idCreator))                    {                        $dao = new \BtcRelax\CustomerDao();                        $creator = $dao->findById($idCreator);                        $order->setCreator($creator);                    }                }    }                private static function createDateTime($input) {		return DateTime::createFromFormat('Y-n-j H:i:s', $input);        }  }