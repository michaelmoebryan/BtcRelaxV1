<?phpnamespace BtcRelax;use BtcRelax\Dao\BookmarkSearchCriteria;use BtcRelax\Model\Order;use BtcRelax\SecureSession;use BtcRelax\Utils;use BtcRelax\Validation\BookmarkValidator;                    global $core;                        $status = $core->getSessionState();    $currentOrder = null;     switch ($status)    {        case SecureSession::STATUS_ROOT:            $header = new LayoutHeader($cUser);            break;        case SecureSession::STATUS_USER:            break;        case SecureSession::STATUS_GUEST:            Utils::redirect('guest');            break;        default:            Utils::redirect('main');            break;         }        $cUser = $core->getUser();    /* @var $core type */    $om = $core->getOM();    $activeOrder = $om->getOrdersByUser($cUser, true);    if ($activeOrder !== null)    {        $core->setCurrentOrder($activeOrder);        $currentOrder = $activeOrder;            }    else     {        $selectedBookmark = $core->getSelectedBookmark();        if ($selectedBookmark != null)        {            $currentOrder = $om->CreateNewOrder($cUser, $bookmark );            if ($currentOrder != null)            {                $core->setCurrentOrder($currentOrder);                $core->clearSelectedBookmark();            }        }    }            //    $isActiveBookMark; //    if (array_key_exists('getBookmark', $extra))//       {          //           $om = $core->getOM();//           $bookmarkDao = new BookmarkDao();//           $bookmark = $bookmarkDao->findById($extra['getBookmark']);//           $order = $om->CreateNewOrder($cUser, $bookmark );//           // Create order here //           $isActiveOrder = true;  //       }//       else//       {//          $isActiveOrder = actionCheckActiveOrders($cUser); //       }        //    $bookmarksList = null;        function actionCheckActiveOrders($cUser) {        $result = false;        return $result;    }        function actionGetActiveBookmarks() {                        $dao = new BookmarkDao();                        $status = BookmarkValidator::validateStatus('Published');                        $search = (new BookmarkSearchCriteria())->setStatus($status);                        $bookmarksList = $dao->find($search);                        return $bookmarksList;    }        function renderGetActiveBookmarks() {        $bList = actionGetActiveBookmarks();        if (empty($bList))        {            $result = "<p>No active bookmarks now!</p>";        }        else        {            	$result = '<div class="container-fluid "><div class="row" >';		$pLang = 'ru';                foreach ($bList as $curPoint) 		{                    $result  .= $curPoint->GetPublicForm($pLang);								 		};					                $result = $result .  '</div></div>';        }        return $result;    }        function renderActiveOrders(Order $order) {              if ($order->getState() == 'Created')        {            $result = "<p>Подтверждение заказа!</p>";        }        else        {            $result = sprintf("<p>Заказ №%s</p>", $order->getIdOrder());        };        return $result;    }    function actionPrepareStoreFront($cUser, $isActiveOrder) {        if (isset($cUser))           {                if (!$isActiveOrder)                {                          actionGetActiveBookmarks();                };            }    }    //$points = BookmarkFactory::GetActiveBookmarks();        //renderActiveOrders();    