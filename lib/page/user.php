<?phpnamespace BtcRelax;use BtcRelax\Dao\BookmarkSearchCriteria;use BtcRelax\Model\Order;use BtcRelax\SecureSession;use BtcRelax\Utils;use BtcRelax\Validation\BookmarkValidator;               global $core;                        $status = $core->getSessionState();    $currentOrder = $core->getCurrentOrder();        switch ($status)    {        case SecureSession::STATUS_ROOT:            $header = new LayoutHeader($cUser);            break;        case SecureSession::STATUS_USER:            break;        case SecureSession::STATUS_GUEST:            Utils::redirect('guest');            break;        default:            Utils::redirect('main');            break;         }    $cUser = $core->getUser();    /* @var $core type */    $om = $core->getOM();    if ($currentOrder === null)    {        $activeOrder = $om->getOrdersByUser($cUser,true);        if ($activeOrder !== null)        {            $core->setCurrentOrder($activeOrder);            $currentOrder = $activeOrder;        }        else         {            $selectedBookmark = $core->getSelectedBookmark();            if ($selectedBookmark != null)            {                $currentOrder = $om->createNewOrder($cUser, $selectedBookmark );                if ($currentOrder != null)                {                    $core->setCurrentOrder($currentOrder);                }            }        }        }        if (array_key_exists("isConfirmed", $extra))    {        $isOrderConfirmed = filter_var($extra["isConfirmed"], FILTER_VALIDATE_BOOLEAN);        if ($isOrderConfirmed === false)        {            // first parameter is null by default, and its mean that variable             // must be cleared            $core->setCurrentOrder();        }        else        {            $core->setCurrentOrder($om->tryConfirmOrder());                }            }        function actionGetActiveBookmarks() {                        $dao = new BookmarkDao();                        $status = BookmarkValidator::validateStatus('Published');                        $search = (new BookmarkSearchCriteria())->setStatus($status);                        $bookmarksList = $dao->find($search);                        return $bookmarksList;    }        function renderGetActiveBookmarks() {        $bList = actionGetActiveBookmarks();        if (empty($bList))        {            $result = "<p>No active bookmarks now!</p>";        }        else        {            	$result = '<div class="container-fluid "><div class="row" >';		$pLang = 'ru';                foreach ($bList as $curPoint) 		{                    $result  .= $curPoint->GetPublicForm($pLang);								 		}        $result = $result .  '</div></div>';        }        return $result;    }